---
swagger: "2.0"
info:
  description: "This is a sample server Studentcourse server.  You can find out more\
    \ about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Studentcourse"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "studentcourse.swagger.io"
basePath: "/v2"
tags:
- name: "student"
  description: "Everything about your Students"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "course"
  description: "Access to Students courses "
- name: "teacher"
  description: "Operations about teacher"
  externalDocs:
    description: "Find out more about our course"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /student:
    post:
      tags:
      - "student"
      summary: "Add a new student to the course"
      description: ""
      operationId: "addStudent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object that needs to be added to the course"
        required: true
        schema:
          $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        "405":
          description: "Invalid input"
      security:
      - studentcourse_auth:
        - "write:students"
        - "read:students"
    put:
      tags:
      - "student"
      summary: "Update an existing student"
      description: ""
      operationId: "updateStudent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object that needs to be added to the course"
        required: true
        schema:
          $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
        "405":
          description: "Validation exception"
      security:
      - studentcourse_auth:
        - "write:students"
        - "read:students"
  /student/{studentId}:
    get:
      tags:
      - "student"
      summary: "Find student by ID"
      description: "Returns a single student"
      operationId: "getStudentById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Student"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
      security:
      - api_key: []
    post:
      tags:
      - "student"
      summary: "Updates a student in the course with form data"
      description: ""
      operationId: "updateStudentWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      - name: "name"
        in: "formData"
        description: "Updated name of the student"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "405":
          description: "Invalid input"
      security:
      - studentcourse_auth:
        - "write:students"
        - "read:students"
    delete:
      tags:
      - "student"
      summary: "Deletes a student"
      description: ""
      operationId: "deleteStudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "studentId"
        in: "path"
        description: "Student id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
      security:
      - studentcourse_auth:
        - "write:students"
        - "read:students"
  /student/{studentId}/uploadImage:
    post:
      tags:
      - "student"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
        x-exportParamName: "AdditionalMetadata"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        x-exportParamName: "File"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - studentcourse_auth:
        - "write:students"
        - "read:students"
  /teacher:
    post:
      tags:
      - "teacher"
      summary: "Create teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "createTeacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created teacher object"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /teacher/createWithArray:
    post:
      tags:
      - "teacher"
      summary: "Creates list of teachers with given input array"
      description: ""
      operationId: "createTeachersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of teacher object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Teacher"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /teacher/createWithList:
    post:
      tags:
      - "teacher"
      summary: "Creates list of teachers with given input array"
      description: ""
      operationId: "createTeachersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of teacher object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Teacher"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /teacher/{teachername}:
    get:
      tags:
      - "teacher"
      summary: "Get teacher by teacher name"
      description: ""
      operationId: "getTeacherByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "teachername"
        in: "path"
        description: "The name that needs to be fetched. Use teacher1 for testing. "
        required: true
        type: "string"
        x-exportParamName: "Teachername"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Teacher"
        "400":
          description: "Invalid teachername supplied"
        "404":
          description: "Teacher not found"
    put:
      tags:
      - "teacher"
      summary: "Updated teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "updateTeacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "teachername"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        x-exportParamName: "Teachername"
      - in: "body"
        name: "body"
        description: "Updated teacher object"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid teacher supplied"
        "404":
          description: "Teacher not found"
    delete:
      tags:
      - "teacher"
      summary: "Delete teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "deleteTeacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "teachername"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Teachername"
      responses:
        "400":
          description: "Invalid teachername supplied"
        "404":
          description: "Teacher not found"
  /course:
    post:
      tags:
      - "course"
      summary: "Create course"
      description: "It is a course"
      operationId: "createCourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created course object"
        required: true
        schema:
          $ref: "#/definitions/Course"
        x-exportParamName: "Body"
      responses:
        default:
          description: "Successful operation"
  /course/{name}:
    get:
      tags:
      - "course"
      summary: "Get course by name"
      description: ""
      operationId: "getCourseByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The name that needs to be fetched. "
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        "400":
          description: "Invalid course supplied"
        "404":
          description: "Course not found"
    put:
      tags:
      - "course"
      summary: "Updated course"
      description: ""
      operationId: "updateCourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        description: "Updated course object"
        required: true
        schema:
          $ref: "#/definitions/Course"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid course supplied"
        "404":
          description: "Course not found"
    delete:
      tags:
      - "course"
      summary: "Delete course"
      description: ""
      operationId: "deleteCourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "400":
          description: "Invalid course supplied"
        "404":
          description: "Course not found"
securityDefinitions:
  studentcourse_auth:
    type: "oauth2"
    authorizationUrl: "http://studentcourse.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:students: "modify students in your account"
      read:students: "read your students"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Course:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      students:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
      teachers:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
      workload:
        type: "number"
        format: "double"
      studentSatisfactionRating:
        type: "number"
        format: "double"
    xml:
      name: "Course"
    example:
      studentSatisfactionRating: 1.46581298050294517310021547018550336360931396484375
      teachers:
      - "{}"
      - "{}"
      name: "name"
      students:
      - "{}"
      - "{}"
      workload: 6.02745618307040320615897144307382404804229736328125
      id: 0
  Teacher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      teachername:
        type: "string"
        format: "string"
      popularityScore:
        type: "number"
        format: "double"
      courses:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
    xml:
      name: "Teacher"
    example:
      popularityScore: 6.02745618307040320615897144307382404804229736328125
      courses:
      - "{}"
      - "{}"
      teachername: "teachername"
      id: 0
  Student:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Brian"
      courses:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
      coursesRating:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "object"
              properties: {}
    xml:
      name: "Student"
    example:
      courses:
      - "{}"
      - "{}"
      name: "Brian"
      id: 0
      coursesRating:
      - "{}"
      - "{}"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
