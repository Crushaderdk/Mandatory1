swagger: "2.0"
info:
  description: "This is a sample server Studentcourse server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Studentcourse"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "studentcourse.swagger.io"
basePath: "/v2"
tags:
  - name: "student"
    description: "Everything about your Students"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "course"
    description: "Access to Studentcourse orders"
  - name: "teacher"
    description: "Operations about teacher"
    externalDocs:
      description: "Find out more about our course"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /student:
    post:
      tags:
        - "student"
      summary: "Add a new student to the course"
      description: ""
      operationId: "addStudent"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Student object that needs to be added to the course"
          required: true
          schema:
            $ref: "#/definitions/Student"
      responses:
        "405":
          description: "Invalid input"
      security:
        - studentcourse_auth:
            - "write:students"
            - "read:students"
    put:
      tags:
        - "student"
      summary: "Update an existing student"
      description: ""
      operationId: "updateStudent"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Student object that needs to be added to the course"
          required: true
          schema:
            $ref: "#/definitions/Student"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
        "405":
          description: "Validation exception"
      security:
        - studentcourse_auth:
            - "write:students"
            - "read:students"

  /student/findByTags:
    get:
      tags:
        - "student"
      summary: "Finds Students by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findStudentsByTags"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Student"
        "400":
          description: "Invalid tag value"
      security:
        - studentcourse_auth:
            - "write:students"
            - "read:students"
      deprecated: true
  /student/{studentId}:
    get:
      tags:
        - "student"
      summary: "Find student by ID"
      description: "Returns a single student"
      operationId: "getStudentById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Student"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
      security:
        - api_key: []
    post:
      tags:
        - "student"
      summary: "Updates a student in the course with form data"
      description: ""
      operationId: "updateStudentWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the student"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the student"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - studentcourse_auth:
            - "write:students"
            - "read:students"
    delete:
      tags:
        - "student"
      summary: "Deletes a student"
      description: ""
      operationId: "deleteStudent"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "studentId"
          in: "path"
          description: "Student id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
      security:
        - studentcourse_auth:
            - "write:students"
            - "read:students"
  /student/{studentId}/uploadImage:
    post:
      tags:
        - "student"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "studentId"
          in: "path"
          description: "ID of student to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - studentcourse_auth:
            - "write:students"
            - "read:students"
  /course/inventory:
    get:
      tags:
        - "course"
      summary: "Returns student inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
        - api_key: []
  /course/order:
    post:
      tags:
        - "course"
      summary: "Place an order for a student"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the student"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /course/order/{orderId}:
    get:
      tags:
        - "course"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of student that needs to be fetched"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
        - "course"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /teacher:
    post:
      tags:
        - "teacher"
      summary: "Create teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "createTeacher"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created teacher object"
          required: true
          schema:
            $ref: "#/definitions/Teacher"
      responses:
        default:
          description: "successful operation"
  /teacher/createWithArray:
    post:
      tags:
        - "teacher"
      summary: "Creates list of teachers with given input array"
      description: ""
      operationId: "createTeachersWithArrayInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of teacher object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Teacher"
      responses:
        default:
          description: "successful operation"
  /teacher/createWithList:
    post:
      tags:
        - "teacher"
      summary: "Creates list of teachers with given input array"
      description: ""
      operationId: "createTeachersWithListInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of teacher object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Teacher"
      responses:
        default:
          description: "successful operation"
  /teacher/login:
    get:
      tags:
        - "teacher"
      summary: "Logs teacher into the system"
      description: ""
      operationId: "loginTeacher"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "teachername"
          in: "query"
          description: "The teacher name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the teacher"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid teachername/password supplied"
  /teacher/logout:
    get:
      tags:
        - "teacher"
      summary: "Logs out current logged in teacher session"
      description: ""
      operationId: "logoutTeacher"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /teacher/{teachername}:
    get:
      tags:
        - "teacher"
      summary: "Get teacher by teacher name"
      description: ""
      operationId: "getTeacherByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "teachername"
          in: "path"
          description: "The name that needs to be fetched. Use teacher1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Teacher"
        "400":
          description: "Invalid teachername supplied"
        "404":
          description: "Teacher not found"
    put:
      tags:
        - "teacher"
      summary: "Updated teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "updateTeacher"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "teachername"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated teacher object"
          required: true
          schema:
            $ref: "#/definitions/Teacher"
      responses:
        "400":
          description: "Invalid teacher supplied"
        "404":
          description: "Teacher not found"
    delete:
      tags:
        - "teacher"
      summary: "Delete teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "deleteTeacher"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "teachername"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid teachername supplied"
        "404":
          description: "Teacher not found"
securityDefinitions:
  studentcourse_auth:
    type: "oauth2"
    authorizationUrl: "http://studentcourse.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:students: "modify students in your account"
      read:students: "read your students"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      studentId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Teacher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      teachername:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "Teacher"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Student:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
    xml:
      name: "Student"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"